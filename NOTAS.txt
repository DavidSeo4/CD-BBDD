--DIFICULTAD: Muy fácil

--1.Devuelve todas las películas
SELECT * FROM PUBLIC.MOVIES 
--2. Devuelve todos los géneros existentes
SELECT * FROM public.genres 
--3. Devuelve la lista de todos los estudios de grabación que estén activos
SELECT * FROM PUBLIC.STUDIOS WHERE STUDIO_ACTIVE = 1
--4. Devuelve una lista de los 20 últimos miembros en anotarse al videoclub
SELECT * FROM PUBLIC.MEMBERS ORDER BY MEMBER_DISCHARGE_DATE DESC LIMIT 20


--DIFICULTAD: Fácil


--5. Devuelve las 20 duraciones de películas más frecuentes, ordenados de mayor a menor.
SELECT MOVIE_DURATION FROM PUBLIC.MOVIES GROUP BY MOVIE_DURATION ORDER BY MOVIE_DURATION DESC LIMIT 20
--6. Devuelve las películas del año 2000 en adelante que empiecen por la letra A.
SELECT * FROM PUBLIC.MOVIES WHERE YEAR (MOVIE_LAUNCH_DATE) > 2000 AND UPPER(MOVIE_NAME) LIKE  'A%' --Usamos UPPER por si algún nombre empieza por minuscula
--7. Devuelve los actores nacidos un mes de Junio
SELECT * FROM PUBLIC.ACTORS WHERE MONTH (ACTOR_BIRTH_DATE)  = 06;
--8. Devuelve los actores nacidos cualquier mes que no sea Junio y que sigan vivos.
SELECT * FROM PUBLIC.ACTORS WHERE MONTH (ACTOR_BIRTH_DATE)  <> 06 AND ACTOR_DEAD_DATE IS NULL ;
--9. Devuelve el nombre y la edad de todos los directores menores o iguales de 50 años que estén vivos
SELECT DIRECTOR_NAME , DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, TODAY()) AS Age FROM PUBLIC.directors WHERE DIRECTOR_DEAD_DATE  IS NULL AND YEAR (CURDATE()) - YEAR (DIRECTOR_BIRTH_DATE) <= 50 ;
--10. Devuelve el nombre y la edad de todos los actores menores de 50 años que hayan fallecido
SELECT ACTOR_NAME, DATEDIFF('YEAR', ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE) AS ACTOR_AGE FROM ACTORS 
WHERE DATEDIFF('YEAR', ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE) < 50 AND ACTOR_DEAD_DATE IS NOT NULL;
--11. Devuelve el nombre de todos los directores menores o iguales de 40 años que estén vivos
SELECT DIRECTOR_NAME FROM directors 
WHERE DATEDIFF('YEAR', DIRECTOR_BIRTH_DATE , Today()) <= 40 AND DIRECTOR_DEAD_DATE  IS NULL;
--12. Indica la edad media de los directores vivos
SELECT AVG(DATEDIFF(YEAR, DIRECTOR_BIRTH_DATE, Today())) AS Edad_media_directores_vivos FROM directors WHERE DIRECTOR_DEAD_DATE IS NULL ;
--13. Indica la edad media de los actores que han fallecido
SELECT AVG(DATEDIFF(YEAR, ACTOR_BIRTH_DATE , ACTOR_DEAD_DATE)) AS Edad_media_fallecidos FROM PUBLIC.ACTORS  WHERE ACTOR_DEAD_DATE  IS not NULL 


--DIFICULTAD: Media


--14. Devuelve el nombre de todas las películas y el nombre del estudio que las ha realizado
SELECT MOVIE_NAME, s.STUDIO_NAME  FROM PUBLIC.MOVIES INNER JOIN PUBLIC.STUDIOS S ON movies.STUDIO_ID = s.STUDIO_ID 

--15. Devuelve los miembros que alquilaron al menos una película entre el año 2010 y el 2015
SELECT DISTINCT MEMBER_NAME, r.MEMBER_RENTAL_DATE  FROM PUBLIC.MEMBERS INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL r ON MEMBER_ID = r.MEMBER_ID 
WHERE YEAR (r.MEMBER_RENTAL_DATE) BETWEEN 2010 AND 2015; 

--16. Devuelve cuantas películas hay de cada país
SELECT COUNT(MOVIE_ID) AS NUMBER_MOVIES, n.NATIONALITY_NAME  FROM PUBLIC.MOVIES INNER JOIN PUBLIC.NATIONALITIES n ON movies.NATIONALITY_ID = n.NATIONALITY_ID GROUP BY n.NATIONALITY_NAME 

--17. Devuelve todas las películas que hay de género documental
SELECT MOVIE_NAME , g.GENRE_NAME  FROM PUBLIC.MOVIES m INNER JOIN PUBLIC.genres g ON m.GENRE_ID  = g.GENRE_ID  WHERE g.GENRE_NAME = 'Documentary' 

--18. Devuelve todas las películas creadas por directores nacidos a partir de 1980 y que todavía están vivos
SELECT * FROM PUBLIC.MOVIES INNER JOIN PUBLIC.directors D ON movies.DIRECTOR_ID = D.DIRECTOR_ID 
WHERE YEAR(d.DIRECTOR_BIRTH_DATE) > 1980 AND d.DIRECTOR_DEAD_DATE IS null

--19. Indica si hay alguna coincidencia de nacimiento de ciudad (y si las hay, indicarlas) entre los miembros del videoclub y los directores.
SELECT * FROM PUBLIC.PUBLIC.MEMBERS m INNER JOIN PUBLIC.PUBLIC.DIRECTORS d ON M.MEMBER_TOWN = D.DIRECTOR_BIRTH_PLACE 

--20. Devuelve el nombre y el año de todas las películas que han sido producidas por un estudio que actualmente no esté activo
SELECT M.MOVIE_NAME, YEAR (M.MOVIE_LAUNCH_DATE) AS "YEAR"  FROM PUBLIC.MOVIES M INNER JOIN PUBLIC.PUBLIC.STUDIOS S ON M.STUDIO_ID = S.STUDIO_ID WHERE S.STUDIO_ACTIVE IS NOT TRUE ;

--21. Devuelve una lista de las últimas 10 películas que se han alquilado
SELECT * FROM PUBLIC.MOVIES M INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL R ON M.MOVIE_ID = R.MOVIE_ID ORDER BY R.MEMBER_RENTAL_DATE DESC LIMIT 10  

--22. Indica cuántas películas ha realizado cada director antes de cumplir 41 años
SELECT D.DIRECTOR_NAME , COUNT(M.MOVIE_ID) AS "NUMBER_OF_MOVIES"  FROM PUBLIC.MOVIES M INNER JOIN PUBLIC.DIRECTORS D ON M.DIRECTOR_ID = D.DIRECTOR_ID 
WHERE DATEDIFF(YEAR, D.DIRECTOR_BIRTH_DATE, M.MOVIE_LAUNCH_DATE) < 40 GROUP BY D.DIRECTOR_NAME  

--23. Indica cuál es la media de duración de las películas de cada director
SELECT d.director_name, AVG(m.movie_duration) AS "AVERAGE_DURATION" FROM directors d INNER
JOIN movies m ON d.director_id = m.director_id GROUP BY d.director_name

--24. Indica cuál es el nombre y la duración mínima de las películas que han sido alquiladas en los últimos 2 años por los miembros del videoclub (La "fecha de ejecución" en este script es el 25-01-2019)
SELECT M.MOVIE_NAME , MIN(M.MOVIE_DURATION)  FROM PUBLIC.PUBLIC.MOVIES m 
INNER JOIN PUBLIC.PUBLIC.MEMBERS_MOVIE_RENTAL R ON M.MOVIE_ID  = R.MOVIE_ID WHERE YEAR (R.MEMBER_RENTAL_DATE) >= 2017 GROUP BY M.MOVIE_NAME 

--25. Indica el número de películas que hayan hecho los directores durante las décadas de los 60, 70 y 80 que contengan la palabra "The" en cualquier parte del título
SELECT D.DIRECTOR_NAME,  COUNT(M.MOVIE_ID) AS "NUMBER_OF_MOVIES"  FROM PUBLIC.PUBLIC.MOVIES m INNER  JOIN PUBLIC.PUBLIC.DIRECTORS d ON M.DIRECTOR_ID = D.DIRECTOR_ID 
WHERE YEAR (M.MOVIE_LAUNCH_DATE) BETWEEN 1960 AND 1990 AND M.MOVIE_NAME LIKE '%The%' GROUP BY D.DIRECTOR_NAME  


--DIFICULTAD: Difícil


--26. Lista nombre, nacionalidad y director de todas las películas
SELECT M.MOVIE_NAME , N.NATIONALITY_NAME , D.DIRECTOR_NAME  FROM PUBLIC.PUBLIC.MOVIES m INNER JOIN PUBLIC.PUBLIC.DIRECTORS d ON M.DIRECTOR_ID = D.DIRECTOR_ID 
INNER JOIN PUBLIC.PUBLIC.NATIONALITIES n ON M.NATIONALITY_ID = N.NATIONALITY_ID 

--27. Muestra las películas con los actores que han participado en cada una de ellas
SELECT MOVIE_NAME , A2.ACTOR_NAME  FROM PUBLIC.MOVIES M INNER JOIN PUBLIC.PUBLIC.MOVIES_ACTORS a ON M.MOVIE_ID = A.MOVIE_ID INNER JOIN PUBLIC.PUBLIC.ACTORS a2 
ON A.ACTOR_ID = A2.ACTOR_ID 


--28. Indica cual es el nombre del director del que más películas se han alquilado
SELECT D.DIRECTOR_NAME, COUNT(M.MOVIE_ID) AS "AMOUNT OF RENTED MOVIES" FROM DIRECTORS D 
JOIN MOVIES M ON D.DIRECTOR_ID = M.DIRECTOR_ID JOIN MEMBERS_MOVIE_RENTAL MM ON M.MOVIE_ID = MM.MOVIE_ID 
GROUP BY D.DIRECTOR_NAME ORDER BY "AMOUNT OF RENTED MOVIES" DESC LIMIT 1;

--29. Indica cuantos premios han ganado cada uno de los estudios con las películas que han creado
SELECT S.STUDIO_NAME , SUM(A.AWARD_WIN) AS "AWARDS_WON"  FROM PUBLIC.AWARDS A INNER JOIN PUBLIC.PUBLIC.MOVIES m ON A.MOVIE_ID = M.MOVIE_ID 
INNER JOIN PUBLIC.PUBLIC.STUDIOS s ON S.STUDIO_ID = M.STUDIO_ID GROUP BY S.STUDIO_NAME

--30. Indica el número de premios a los que estuvo nominado un actor, pero que no ha conseguido (Si una película está nominada a un premio, su actor también lo está)
SELECT AC.ACTOR_NAME , SUM(A.AWARD_ALMOST_WIN) AS NOMINATIONS   FROM PUBLIC.AWARDS A 
INNER JOIN PUBLIC.PUBLIC.MOVIES M ON M.MOVIE_ID = A.MOVIE_ID 
INNER JOIN PUBLIC.PUBLIC.MOVIES_ACTORS MA ON M.MOVIE_ID = MA.MOVIE_ID 
INNER JOIN PUBLIC.PUBLIC.ACTORS AC ON MA.ACTOR_ID = AC.ACTOR_ID 
GROUP BY AC.ACTOR_NAME 
ORDER BY NOMINATIONS DESC

--31. Indica cuantos actores y directores hicieron películas para los estudios no activos
SELECT COUNT( DISTINCT M.DIRECTOR_ID) AS "AMOUNT_DIRECTORS", COUNT(DISTINCT MA.ACTOR_ID) AS "AMOUNT_ACTORS"  FROM PUBLIC.STUDIOS S 
INNER JOIN PUBLIC.MOVIES M ON M.STUDIO_ID = S.STUDIO_ID 
INNER JOIN MOVIES_ACTORS MA ON MA.MOVIE_ID = M.MOVIE_ID 
WHERE S.STUDIO_ACTIVE IS FALSE

--32. Indica el nombre, ciudad, y teléfono de todos los miembros del videoclub que hayan alquilado películas que hayan sido nominadas a más de 150 premios y ganaran menos de 50
SELECT DISTINCT M.MEMBER_NAME , M.MEMBER_TOWN , M.MEMBER_PHONE  FROM MEMBERS M 
INNER JOIN MEMBERS_MOVIE_RENTAL MMR ON MMR.MEMBER_ID = M.MEMBER_ID 
INNER JOIN MOVIES MO ON  MMR.MOVIE_ID = MO.MOVIE_ID 
INNER JOIN AWARDS AW ON AW.MOVIE_ID = MO.MOVIE_ID 
WHERE AW.AWARD_NOMINATION > 150 AND AW.AWARD_WIN < 50;

--33. Comprueba si hay errores en la BD entre las películas y directores (un director fallecido en el 76 no puede dirigir una película en el 88)
SELECT DISTINCT D.DIRECTOR_NAME, D.DIRECTOR_DEAD_DATE , MAX(M.MOVIE_LAUNCH_DATE) AS LAST_MOVIE  FROM PUBLIC.MOVIES M 
INNER JOIN DIRECTORS D ON M.DIRECTOR_ID = D.DIRECTOR_ID 
WHERE M.MOVIE_LAUNCH_DATE > D.DIRECTOR_DEAD_DATE  
GROUP BY D.DIRECTOR_NAME, D.DIRECTOR_DEAD_DATE 

-- 34. Utilizando los datos de la sentencia anterior, modifica la fecha de defunción a un año más tarde del estreno de la película (mediante sentencia SQL)

UPDATE

    DIRECTORS

SET

    DIRECTOR_DEAD_DATE =(

    SELECT

        MAX(DATEADD(YEAR, 1, M.MOVIE_LAUNCH_DATE)) AS POST_MOVIE_LAUNCH_DATE

    FROM

        MOVIES M

    INNER JOIN DIRECTORS D ON

        M.DIRECTOR_ID = D.DIRECTOR_ID

    WHERE

        D.DIRECTOR_DEAD_DATE IS NOT NULL

        AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE

        AND D.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID

    GROUP BY

        DIRECTOR_NAME,

        DIRECTOR_DEAD_DATE)

WHERE

    DIRECTOR_ID IN (

    SELECT

        DISTINCT D.DIRECTOR_ID

    FROM

        MOVIES M

    INNER JOIN DIRECTORS D ON

        M.DIRECTOR_ID = D.DIRECTOR_ID

    WHERE

        D.DIRECTOR_DEAD_DATE IS NOT NULL

        AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE )


--------------------------------------OTRA MANERA DE HACERLO USANDO MERGE INTO----------------------------------

MERGE

INTO

    PUBLIC.DIRECTORS D

        USING (

    SELECT

        DIRECTOR_ID,

        DATEADD(YEAR,

        1,

        MAX(M.MOVIE_LAUNCH_DATE)) AS DIRECTOR_DEAD_DATE

    FROM

        PUBLIC.DIRECTORS D

    INNER JOIN PUBLIC.MOVIES M ON

        D.DIRECTOR_ID = M.DIRECTOR_ID

    WHERE

        D.DIRECTOR_DEAD_DATE IS NOT NULL

        AND M.MOVIE_LAUNCH_DATE > D.DIRECTOR_DEAD_DATE

    GROUP BY

        D.DIRECTOR_ID

        

        ) TOT(DIRECTOR_ID,

    DIRECTOR_DEAD_DATE) ON

    D.DIRECTOR_ID = TOT.DIRECTOR_ID

    WHEN MATCHED THEN

UPDATE

SET

    D.DIRECTOR_DEAD_DATE = TOT.DIRECTOR_DEAD_DATE
















--DIFICULTAD: Berserk mode (enunciados simples, mucha diversión...)

--35. Indica cuál es el género favorito de cada uno de los directores cuando dirigen una película
SELECT

    GROUPID.DIRECTOR_NAME,

    GROUP_CONCAT(GROUPID.GENRE_NAME) AS GENRE_NAME

FROM

    (

    SELECT

        COUNT(G.GENRE_NAME) AS NUM_MOVIES,

        D.DIRECTOR_ID,

        D.DIRECTOR_NAME,

        G.GENRE_ID,

        G.GENRE_NAME

    FROM

        MOVIES M

    INNER JOIN GENRES AS G ON

        M.GENRE_ID = G.GENRE_ID

    INNER JOIN DIRECTORS D ON

        M.DIRECTOR_ID = D.DIRECTOR_ID

    GROUP BY

        G.GENRE_ID,

        D.DIRECTOR_ID

    ORDER BY

        D.DIRECTOR_ID) GROUPID

INNER JOIN (

    SELECT

        DIRECTOR_ID,

        MAX(NUM_MOVIES) NUM_MOVIES

    FROM

        (

        SELECT

            COUNT(G.GENRE_NAME) AS NUM_MOVIES,

            D.DIRECTOR_ID,

            D.DIRECTOR_NAME,

            G.GENRE_ID,

            G.GENRE_NAME

        FROM

            MOVIES M

        INNER JOIN GENRES AS G ON

            M.GENRE_ID = G.GENRE_ID

        INNER JOIN DIRECTORS D ON

            M.DIRECTOR_ID = D.DIRECTOR_ID

        GROUP BY

            G.GENRE_ID,

            D.DIRECTOR_ID

        ORDER BY

            D.DIRECTOR_ID)

    GROUP BY

        DIRECTOR_ID) MAXVAL ON

    GROUPID.DIRECTOR_ID = MAXVAL.DIRECTOR_ID

    AND GROUPID.NUM_MOVIES = MAXVAL.NUM_MOVIES

GROUP BY

    GROUPID.DIRECTOR_NAME

--36. Indica cuál es la nacionalidad favorita de cada uno de los estudios en la producción de las películas

SELECT

        COUNT(N.NATIONALITY_NAME) AS NUM_NATIONS,

        S.STUDIO_ID,

        S.STUDIO_NAME,

        N.NATIONALITY_ID,

        N.NATIONALITY_NAME

    FROM

        PUBLIC.PUBLIC.MOVIES M

    INNER JOIN PUBLIC.PUBLIC.NATIONALITIES N ON

        M.NATIONALITY_ID = N.NATIONALITY_ID

    INNER JOIN PUBLIC.PUBLIC.STUDIOS S ON

        S.STUDIO_ID = M.STUDIO_ID

    GROUP BY

        N.NATIONALITY_ID,

        S.STUDIO_ID

    ORDER BY

        S.STUDIO_ID) TABLA_1
        
        INNER JOIN (
        
        SELECT

        STUDIO_ID,

        MAX(NUM_NATIONS) NUM_NATIONS

    FROM

        (

        SELECT

            COUNT(N.NATIONALITY_NAME) AS NUM_NATIONS,

            S.STUDIO_ID,

            S.STUDIO_NAME,

            N.NATIONALITY_ID,

            N.NATIONALITY_NAME

        FROM

            MOVIES M

        INNER JOIN PUBLIC.NATIONALITIES  N ON

            M.NATIONALITY_ID = N.NATIONALITY_ID

        INNER JOIN PUBLIC.STUDIOS S ON

            S.STUDIO_ID = M.STUDIO_ID

        GROUP BY

            N.NATIONALITY_ID,

            S.STUDIO_ID

        ORDER BY

            S.STUDIO_ID)

    GROUP BY

        S.STUDIO_ID) MAXVAL ON

    TABLA_1.STUDIO_ID = MAXVAL.STUDIO_ID

    AND TABLA_1.NUM_NATIONS = MAXVAL.NUM_NATIONS

GROUP BY

    TABLA_1.STUDIO_NAME

--37. Indica cuál fue la primera película que alquilaron los miembros del videoclub cuyos teléfonos tengan como último dígito el ID de alguna nacionalidad

SELECT
    MOVIERENTALS.MOVIE_NAME,
    MOVIERENTALS.MEMBER_NAME
FROM
    (
    SELECT
        MO.MOVIE_NAME,
        MMR.MOVIE_ID,
        MMR.MEMBER_ID,
        MMR.MEMBER_RENTAL_DATE,
        M.MEMBER_NAME,
        TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) AS "LAST_DIGIT"
    FROM
        MOVIES MO
    INNER JOIN
    MEMBERS_MOVIE_RENTAL MMR
    ON
        MO.MOVIE_ID = MMR.MOVIE_ID
    INNER JOIN MEMBERS M ON
        MMR.MEMBER_ID = M.MEMBER_ID
    WHERE
        TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) IN (
        SELECT
            NATIONALITY_ID
        FROM
            NATIONALITIES

 

)
    GROUP BY
        MO.MOVIE_NAME,
        MMR.MOVIE_ID,
        MMR.MEMBER_ID,
        MMR.MEMBER_RENTAL_DATE,
        M.MEMBER_NAME,
        LAST_DIGIT
    ORDER BY
        M.MEMBER_NAME

 

) MOVIERENTALS
INNER JOIN

    (
    SELECT
        MEMBER_ID,
        MIN(MEMBER_RENTAL_DATE) AS "FIRST_RENTAL"
    FROM
        (
        SELECT
            MO.MOVIE_NAME,
            MMR.MOVIE_ID,
            MMR.MEMBER_ID,
            MMR.MEMBER_RENTAL_DATE,
            M.MEMBER_NAME,
            TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) AS "LAST_DIGIT"
        FROM
            MOVIES MO
        INNER JOIN
    MEMBERS_MOVIE_RENTAL MMR
    ON
            MO.MOVIE_ID = MMR.MOVIE_ID
        INNER JOIN MEMBERS M ON
            MMR.MEMBER_ID = M.MEMBER_ID
        WHERE
            TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) IN (
            SELECT
                NATIONALITY_ID
            FROM
                NATIONALITIES

 

)
        GROUP BY
            MO.MOVIE_NAME,
            MMR.MOVIE_ID,
            MMR.MEMBER_ID,
            MMR.MEMBER_RENTAL_DATE,
            M.MEMBER_NAME,
            LAST_DIGIT
        ORDER BY
            M.MEMBER_NAME
    )
    GROUP BY
        MEMBER_ID) FIRSTRENTALS ON
    MOVIERENTALS.MEMBER_ID = FIRSTRENTALS.MEMBER_ID AND MOVIERENTALS.MEMBER_RENTAL_DATE = FIRSTRENTALS.FIRST_RENTAL
GROUP BY
    MOVIERENTALS.MOVIE_NAME,
    MOVIERENTALS.MEMBER_NAME

--O TAMBIEN


SELECT M.MEMBER_NAME, R.MEMBER_RENTAL_DATE, P.MOVIE_NAME FROM MEMBERS M 
JOIN MEMBERS_MOVIE_RENTAL R ON M.MEMBER_ID = R.MEMBER_ID 
JOIN MOVIES P ON R.MOVIE_ID = P.MOVIE_ID JOIN NATIONALITIES N ON RIGHT(M.MEMBER_PHONE, 1) = N.NATIONALITY_ID 
WHERE R.MEMBER_RENTAL_DATE = ( SELECT MIN(MR.MEMBER_RENTAL_DATE) FROM MEMBERS_MOVIE_RENTAL MR WHERE M.MEMBER_ID = MR.MEMBER_ID ) ORDER BY M.MEMBER_NAME;




--Fin de los ejercicios